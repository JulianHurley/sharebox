require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

### MATCHERS:
# filter_param tests parameter filtering configuration. -
# redirect_to tests that an action redirects to a certain location.
# render_template tests that an action renders a template.
# render_with_layout tests that an action is rendereed with a certain layout.
# rescue_from tests usage of the rescue_from macro. 
# respond_with tests that an action responds with a certain status code.
# route tests your routes. -
# set_session makes assertions on the session hash. -
# set_the_flash makes assertions on the flash hash.

RSpec.describe FoldersController, :type => :controller do

  let!(:user) { FactoryGirl.create(:user) }  
  let!(:parent_folder) { FactoryGirl.create(:folder, user_id: user.id) }
  let!(:child_folder) { FactoryGirl.create(:folder, user_id: user.id, parent_id: parent_folder.id) }
  let!(:orphan_folder) { FactoryGirl.create(:folder, user_id: user.id, parent_id: nil) }

  before do
    sign_in user
  end

  describe '#edit' do
    before do
      get :edit, id: parent_folder.id
    end
  
#    it { should route(:get, '/browse/1').to(controller: :static, action: :browse, id: parent_folder.id) }
  end

  describe '#edit' do
    before do
      get :edit, id: parent_folder.id
    end

    it { should set_the_instance_variable(:@folder).to(parent_folder)}
    it { should respond_with_type 'text/html' }
  end

  describe '#update' do
    let(:new_name) { Faker::Lorem.word }
    let(:request) { patch :update, id: parent_folder.id, folder: { name: new_name, parent_id: nil, user_id: user.id } }


    describe 'response' do
      before { request }
      subject { response }

      it { should respond_with_type 'text/html' }
      it { should set_flash_type_to :notice }
      it { should set_flash_message_to 'Folder was successfully updated.' }
      it { should filter_param('password') }
      it { should set_session 'arse' }
    end

    it 'route' do
      #controller.should route(:get, '/posts/1').to(action: :show, id: 1)
    end

    it 'should make database queries' do
      expect { request }.to make_database_queries(count: 5)
    end

    it 'should change the name' do
    #  expect{ request }.to change( parent_folder.reload.name ).from(parent_folder.name).to(parent_folder.name)# @new_name
      expect {
        request
      }.to change{parent_folder.reload.name}.from(parent_folder.name).to(new_name)
    end
  end

  describe '#destroy' do
    it 'deletes an orphaned folder' do
        expect{ delete :destroy, id: orphan_folder.id }.to change(Folder, :count).by(-1)
    end

    it 'deletes a child folder' do
        expect{ delete :destroy, id: child_folder.id }.to change(Folder, :count).by(-1)
    end

    describe 'response when orphan' do
      before do
        delete :destroy, id: orphan_folder.id
      end
      it { should set_status_code 302 }
      it { should redirect_to_location '/' }
      it { should set_flash_type_to :notice }
      it { should set_flash_message_to 'successfully delted the folder' }
    end

    describe 'response when in folder' do

      before do
        delete :destroy, id: child_folder.id
      end

      it { should set_status_code 302 }
      it { should redirect_to_location "/browse/#{parent_folder.id}" }
      it { should set_flash_type_to :notice }
      it { should set_flash_message_to 'successfully delted the folder' }
    end
  end
end
